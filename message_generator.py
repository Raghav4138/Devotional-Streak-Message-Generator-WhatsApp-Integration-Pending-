# 1. IMPORTS
import pandas as pd
from datetime import datetime


# 2. CONFIGURATION & CONSTANTS
FILE_PATH = r'C:\Users\rgvka\Downloads\sample_data.csv'
SUPPORTED_DATE_FORMATS = ["%m/%d/%Y", "%m-%d-%Y"]
CURRENT_DATE = pd.to_datetime("2025-08-23")
MILESTONE_DAYS = [7, 15, 30, 50, 75]

# Dictionary of milestone-specific messages
MILESTONE_MESSAGES = {
    7: (
        "рдЬрдп рд╢реНрд░реА рд╢реНрдпрд╛рдо ЁЯЩП\n"
        "рдкреНрд░рд┐рдп {name},\n"
        "рдЖрдкрдХреА рдЕрд░рдЬреА рдХреЛ рдЖрдЬ 7 рджрд┐рди рдкреВрд░реЗ рд╣реЛ рдЧрдП рд╣реИрдВред "
        "рдмрд╛рдмрд╛ рдХреЗ рджрд░рдмрд╛рд░ рдореЗрдВ рдкрд╣рд▓рд╛ рд╕рдкреНрддрд╛рд╣ рдмрд╣реБрдд рд╢реБрдн рдорд╛рдирд╛ рдЬрд╛рддрд╛ рд╣реИред "
        "рд╣рдо рдкреНрд░рд╛рд░реНрдердирд╛ рдХрд░рддреЗ рд╣реИрдВ рдХрд┐ рдЖрдкрдХреЗ рдорди рдХреА рдкреБрдХрд╛рд░ рдмрд╛рдмрд╛ рддрдХ рдкрд╣реБрдБрдЪ рдЪреБрдХреА рд╣реЛред\n"
        "рдЬрдп рд╢реНрд░реА рд╢реНрдпрд╛рдоред"
    ),
    15: (
        "рдЬрдп рд╢реНрд░реА рд╢реНрдпрд╛рдо ЁЯЩП\n"
        "рдкреНрд░рд┐рдп {name},\n"
        "рдкрд┐рдЫрд▓реЗ 15 рджрд┐рдиреЛрдВ рд╕реЗ рдЖрдкрдХреА рдЕрд░рдЬреА рдмрд╛рдмрд╛ рдХреЗ рдЪрд░рдгреЛрдВ рдореЗрдВ рд▓рдЧ рд░рд╣реА рд╣реИред "
        "рдпрд╣ рдирд┐рд░рдВрддрд░рддрд╛ рдЖрдкрдХреЗ рд╡рд┐рд╢реНрд╡рд╛рд╕ рдФрд░ рд╕рдорд░реНрдкрдг рдХрд╛ рдкреНрд░рдорд╛рдг рд╣реИред "
        "рдмрд╛рдмрд╛ рдирд┐рд╢реНрдЪрд┐рдд рд╣реА рдЖрдкрдХреЗ рдзреИрд░реНрдп рдФрд░ рд╢реНрд░рджреНрдзрд╛ рдХреЛ рдЖрд╢реАрд░реНрд╡рд╛рдж рдореЗрдВ рдмрджрд▓реЗрдВрдЧреЗред\n"
        "рдЬрдп рд╢реНрд░реА рд╢реНрдпрд╛рдоред"
    ),
    30: (
        "рдЬрдп рд╢реНрд░реА рд╢реНрдпрд╛рдо ЁЯЩП\n"
        "рдкреНрд░рд┐рдп {name},\n"
        "рдЖрдкрдХреА рдЕрд░рдЬреА рдХреЛ рдЖрдЬ 30 рджрд┐рди рдкреВрд░реНрдг рд╣реБрдП рд╣реИрдВред "
        "рдПрдХ рдкреВрд░рд╛ рдорд╣реАрдирд╛ рдмрд╛рдмрд╛ рдХреЗ рдЪрд░рдгреЛрдВ рдореЗрдВ рд╕рд╛рдзрдирд╛ рдФрд░ рдкреНрд░рд╛рд░реНрдердирд╛ рдХрд╛ рдмрд╣реБрдд рдорд╣рддреНрд╡ рд╣реИред "
        "рд╣рдо рдкреНрд░рд╛рд░реНрдердирд╛ рдХрд░рддреЗ рд╣реИрдВ рдХрд┐ рдмрд╛рдмрд╛ рдЖрдкрдХреЗ рдЬреАрд╡рди рдореЗрдВ рд╕реБрдЦ-рд╕рдореГрджреНрдзрд┐ рдФрд░ рд╢рд╛рдВрддрд┐ рдкреНрд░рджрд╛рди рдХрд░реЗрдВред\n"
        "рдЬрдп рд╢реНрд░реА рд╢реНрдпрд╛рдоред"
    ),
    50: (
        "рдЬрдп рд╢реНрд░реА рд╢реНрдпрд╛рдо ЁЯЩП\n"
        "рдкреНрд░рд┐рдп {name},\n"
        "рдкрд┐рдЫрд▓реЗ 50 рджрд┐рдиреЛрдВ рд╕реЗ рдЖрдкрдХреА рдЕрд░рдЬреА рд▓рдЧрд╛рддрд╛рд░ рдмрд╛рдмрд╛ рдХреЗ рджрд░рдмрд╛рд░ рдореЗрдВ рдЬрд╛ рд░рд╣реА рд╣реИред "
        "рдЗрддрдирд╛ рд▓рдВрдмрд╛ рд╕рдордп рдХреЗрд╡рд▓ рд╕рдЪреНрдЪреЗ рд╡рд┐рд╢реНрд╡рд╛рд╕ рдФрд░ рд╕рдорд░реНрдкрдг рд╕реЗ рд╣реА рд╕рдВрднрд╡ рд╣реИред "
        "рдмрд╛рдмрд╛ рдЕрд╡рд╢реНрдп рд╣реА рдЖрдкрдХреА рдкреБрдХрд╛рд░ рдХрд╛ рдЙрддреНрддрд░ рджреЗрдВрдЧреЗ рдФрд░ рдЬреАрд╡рди рдореЗрдВ рдирдИ рд░рд╛рд╣ рджрд┐рдЦрд╛рдПрдБрдЧреЗред\n"
        "рдЬрдп рд╢реНрд░реА рд╢реНрдпрд╛рдоред"
    ),
    75: (
        "рдЬрдп рд╢реНрд░реА рд╢реНрдпрд╛рдо ЁЯЩП\n"
        "рдкреНрд░рд┐рдп {name},\n"
        "рдЖрдЬ рдЖрдкрдХреА рдЕрд░рдЬреА рдХреЛ 75 рджрд┐рди рдкреВрд░реНрдг рд╣реБрдП рд╣реИрдВред "
        "рдпрд╣ рд╕рд╛рдзрдирд╛ рдХреЗрд╡рд▓ рдЕрд░рдЬреА рдирд╣реАрдВ, рдмрд▓реНрдХрд┐ рдЖрдкрдХреЗ рд╡рд┐рд╢реНрд╡рд╛рд╕ рдХреА рд╢рдХреНрддрд┐ рдХрд╛ рдкреНрд░рддреАрдХ рд╣реИред "
        "рдмрд╛рдмрд╛ рдЖрдкрдХреЛ рдЖрд╢реАрд░реНрд╡рд╛рдж рджреЗрдВ рдФрд░ рдЖрдкрдХреЗ рдЬреАрд╡рди рдХреЛ рдкреНрд░рдХрд╛рд╢ рдФрд░ рдЖрдирдВрдж рд╕реЗ рднрд░ рджреЗрдВред\n"
        "рдЬрдп рд╢реНрд░реА рд╢реНрдпрд╛рдоред"
    )
}


# 3. FUNCTION DEFINITIONS
def parse_dates_with_multiple_formats(date_series, formats):
    parsed_dates = []
    for date_string in date_series:
        parsed_datetime = None
        for date_format in formats:
            try:
                parsed_datetime = datetime.strptime(date_string, date_format)
                break
            except (ValueError, TypeError):
                continue
        parsed_dates.append(parsed_datetime if parsed_datetime else date_string)
    return pd.Series(parsed_dates)


# 4. DATA LOADING & PROCESSING
prayers_df = pd.read_csv(FILE_PATH, encoding='utf-8')

prayers_df['date'] = prayers_df['date'].str.split(' ').str[0]
prayers_df['date'] = parse_dates_with_multiple_formats(prayers_df['date'].astype(str), SUPPORTED_DATE_FORMATS)

sorted_prayers_df = prayers_df.sort_values(by='date', ignore_index=True)
sorted_prayers_df['days_since_prayer'] = (CURRENT_DATE - sorted_prayers_df['date']).dt.days


# 5. MESSAGE GENERATION
milestone_prayers_df = sorted_prayers_df[sorted_prayers_df['days_since_prayer'].isin(MILESTONE_DAYS)].copy()

milestone_prayers_df.loc[:, "message"] = milestone_prayers_df.apply(
    lambda row: MILESTONE_MESSAGES.get(row["days_since_prayer"], "").format(
        name=row["name"]
    ),
    axis=1
)


# 6. OUTPUT
if not milestone_prayers_df.empty:
    print("--- Sample Message ---")
    print(milestone_prayers_df.iloc[0]['message'])
    print("--- Sample Message ---")
    print(milestone_prayers_df.iloc[2]['message'])
else:
    print("No messages to generate for today's milestones.")
